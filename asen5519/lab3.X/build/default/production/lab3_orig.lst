MPASM 5.68                     LAB3_ORIG.ASM   9-27-2016  20:52:21         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;;;;;;; ASEN 4-5519 Lab3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00002 ; Author: Russell Bjella
                      00003 ; Date  : 15-SEP-2016
                      00004 ;
                      00005 ; DESCRIPTION
                      00006 ; On power up execute the following sequence:
                      00007 ;       D2 ON for ~1 second then OFF
                      00008 ;       D3 ON for ~1 second then OFF
                      00009 ;       D4 ON for ~1 second then OFF
                      00010 ; LOOP on the following forever:
                      00011 ;       Blink "Alive" LED (D6) ON for ~1sec then OFF for ~1sec
                      00012 ;       Read input from RPG (at least once per millesecond) and output the values on D2 and D3
                      00013 ;       ASEN5519 ONLY: Read input from SW3 and toggle the value of D4 such that the switch being pressed
                             and
                      00014 ;                released causes D4 to change state from ON to OFF or OFF to ON
                      00015 ;       NOTE: ~1 second means +/- 100msec
                      00016 ;
                      00017 ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00018 ;
                      00019 ; Mainline
                      00020 ;       Loop
                      00021 ; Initial - Initalize ports and countdown D2, D3 and D4
                      00022 ; WaitXXXms - Subroutine to wait XXXms
                      00023 ; Wait1sec - Subroutine to wait 1 sec based on calling WaitXXXms YYY times
                      00024 ; Check_SW3 - Subroutne to check the status of SW3 and change D4 (ASEN5519 ONLY)
                      00025 ; Check_RPG - Read the values of the RPG and display on D2 and D3
                      00026 ;
                      00027 ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00028 
                      00029         LIST  P=PIC18F87K22, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
                      00030         #include P18F87K22.inc
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : May 15 2016
                      00005 ;  MPASM PIC18F87K22 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      02984         LIST
                      00031 
                      00032 ;               MPLAB 7.20 and later configuration directives
                      00033 ;               Select "Configuration Bits set in code" to use the following configuration
                      00034                 CONFIG  FOSC = HS1, XINST = OFF
                      00035                 CONFIG  PWRTEN = ON, BOREN = ON, BORV = 1
                      00036                 CONFIG  WDTEN = OFF
                      00037                 CONFIG  CCP2MX = PORTBE
                      00038                 
                      00039 
                      00040 
                      00041 ;;;;;;; Hardware notes ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00042 ;
                      00043 ;   LED D2 port/pin is B5
                      00044 ;   LED D3 port/pin is B6               Students add values/remove question marks
                      00045 ;   LED D4 port/pin is B7
                      00046 ;   PIC board LED D6 port/pin is B4
                      00047 ;   PIC board LED D6 - pull pin ? to turn LED on
                      00048 ;       RPG-A port/pin is D0
                      00049 ;       RPG-B port/pin is D1
                      00050 ;       SW1 port/pin is D3
                      00051 
                      00052 ;;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00053 
                      00054         cblock  0x000   ;Beginning of Access RAM, define your variables here
  00000000            00055                         CNT         ;EXAMPLE: variable CNT is at memory address 0x000 in RAM
  00000001            00056                         VAL1        ;EXAMPLE: variable VAL1 is at memory address 0x001 in RAM
                      00057         endc
                      00058 
                      00059 ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00060 
                      00061 ; MOVLF is a macro that puts a literal value into a GPR or SFR
                      00062 MOVLF   macro  literal,dest
                      00063         movlw  literal
                      00064         movwf  dest
                      00065                 endm
                      00066 
                      00067 ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00068 
                      00069         org  0x0000             ;Reset vector
000000 0000           00070         nop
000002 EF?? F???      00071         goto  Mainline
                      00072 
                      00073         org  0x0008             ;High priority interrupt vector
000008 EF?? F???      00074         goto  $                 ;Trap
                      00075 
                      00076         org  0x0018             ;Low priority interrupt vector
000018 EF?? F???      00077         goto  $                 ;Trap
                      00078 
                      00079 ;;;;;;; Mainline program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00080 
00001C                00081 Mainline
00001C D???           00082         rcall  Initial          ;Jump to initalization routine
00001E                00083 Loop
00001E 788A           00084         BTG     LATB,4  ; Toggle D6 on/off
                      00085         MOVLF   0xFA,CNT    ; Store 250 in CNT for 2ms
000020 0EFA               M         movlw  0xFA
000022 6E00               M         movwf  CNT
                      00086 ; Go through second loop 250 times, waiting 4ms each time
000024                00087 Loop4
000024 D???           00088             RCALL   Check_RPG
000026 D???           00089             RCALL   Check_SW3
000028 D???           00090             RCALL   Wait2ms
00002A D???           00091             RCALL   Check_RPG
00002C D???           00092             RCALL   Check_SW3
00002E D???           00093             RCALL   Wait2ms
000030 0600           00094             DECF    CNT,1,0     ; Decrement counter, started at 250
000032 E1??           00095             BNZ     Loop4
                      00096         ; Loop infinitely through main loop
000034 D???           00097         bra     Loop                            ; Main loop should run forever after entry
                      00098 
                      00099 ;;;;;;; Initial subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00100 ;
                      00101 ; This subroutine performs all initializations of variables and registers.
                      00102 
000036                00103 Initial
                      00104         MOVLF   B'00000000',TRISB       ; Set TRISB as outputs
000036 0E00               M         movlw  B'00000000'
000038 6E93               M         movwf  TRISB
                      00105         MOVLF   B'00000011',TRISD       ; Set TRISD 0 and 1 as inputs
00003A 0E03               M         movlw  B'00000011'
00003C 6E95               M         movwf  TRISD
                      00106         MOVLF   B'00000000',LATB        ; Turn off all LEDS
00003E 0E00               M         movlw  B'00000000'
000040 6E8A               M         movwf  LATB
000042 D???           00107         RCALL   Wait1sec        ; call subroutine to wait 1 second
000044 8A8A           00108         BSF     LATB,5  ; Turn ON D2
000046 D???           00109         RCALL   Wait1sec        ; call subroutine to wait 1 second
000048 9A8A           00110         BCF     LATB,5  ; Turn OFF D2
00004A 8C8A           00111         BSF     LATB,6  ; Turn ON D3
00004C D???           00112         RCALL   Wait1sec        ; call subroutine to wait 1 second
00004E 9C8A           00113         BCF     LATB,6  ; Turn OFF D3
000050 8E8A           00114         BSF     LATB,7  ; Turn ON D4
000052 D???           00115         RCALL   Wait1sec        ; call subroutine to wait 1 second
000054 9E8A           00116         BCF     LATB,7  ; Turn OFF D4
000056 D???           00117         BRA     Loop    ; Go to infinite loop
000058 0012           00118         return
                      00119 
                      00120 ;;;;;;; Wait2ms subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00121 ;
                      00122 ; Subroutine to wait 2 ms
                      00123 
                      00124         ; NOTE - STUDENTS replace XXX with some value of your choosing
                      00125         ; Choose a suitable value based on a single (non-nested) loop structure and 
                      00126         ; not using an excessive amount of program memory - i.e. don't use 100 nop's
                      00127                 
00005A                00128 Wait2ms
  0000F63C            00129 SMLNUM  EQU     65536-2500
00005A 0E00           00130         MOVLW   B'00000000'
00005C 6ED5           00131         MOVWF   T0CON,0
00005E 0EF6           00132         MOVLW   high SMLNUM
000060 6ED7           00133         MOVWF   TMR0H,0
000062 0E3C           00134         MOVLW   low SMLNUM
000064 6ED6           00135         MOVWF   TMR0L
000066 8ED5           00136         BSF     T0CON,7,0
000068                00137 Loop1   
000068 A4F2           00138         BTFSS   INTCON,TMR0IF,0 ;loop until interrupt flag
00006A D???           00139         BRA     Loop1
00006C 9ED5           00140         BCF     T0CON,7,0   ; turn off timer
00006E 94F2           00141         BCF     INTCON,TMR0IF,0 ;clear the IF
000070 0012           00142         return
                      00143 
                      00144 ;;;;;;; Wait1sec subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00145 ;
                      00146 ; Subroutine to wait 1 sec based on calling WaitXXXms YYY times
                      00147                                 
000072                00148 Wait1sec
  00006769            00149 BIGNUM  EQU     65536-39063
000072 0E05           00150         MOVLW   B'00000101'
000074 6ED5           00151         MOVWF   T0CON,0
000076 0E67           00152         MOVLW   high BIGNUM
000078 6ED7           00153         MOVWF   TMR0H,0
00007A 0E69           00154         MOVLW   low BIGNUM
00007C 6ED6           00155         MOVWF   TMR0L
00007E 8ED5           00156         BSF     T0CON,7,0
000080                00157 Loop2   
000080 A4F2           00158         BTFSS   INTCON,TMR0IF,0 ;loop until interrupt flag
000082 D???           00159         BRA     Loop2
000084 9ED5           00160         BCF     T0CON,7,0   ; turn off timer
000086 94F2           00161         BCF     INTCON,TMR0IF,0 ;clear the IF
                      00162 ;;;;;;; Check_SW3 subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00163 ;
                      00164 ; Subroutine to check the status of SW3 and change D4 (ASEN5519 ONLY)
                      00165                                 
000088                00166 Check_SW3
                      00167         ; Check if switch is pressed, skip branch if it is 
000088 A683           00168         BTFSS   PORTD,3
00008A D???           00169         BRA     CLRVAL1
00008C B001           00170         BTFSC   VAL1,0  ; If VAL1 bit0 is clear, set it true and toggle D4
00008E 0012           00171         return  ; return if VAL1 bit0 is set
000090 8001           00172         BSF     VAL1,0
000092 7E8A           00173         BTG     LATB,7
000094 0012           00174         return
                      00175         
000096                00176 CLRVAL1 ; subroutine to clear bit 0 of VAL1
000096 9001           00177         BCF     VAL1,0
000098 0012           00178         return
                      00179 
                      00180 ;;;;;;; Check_RPG subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00181 ;
                      00182 ; Subroutne to read the values of the RPG and display on D2 and D3 
                      00183                                 
00009A                00184 Check_RPG
00009A A083           00185         BTFSS   PORTD,0     ; Skip next if D0 (RPGA) is set
00009C D???           00186         BRA     AOFF    ; Branch to subroutine to turn D2 off, otherwise turn on
00009E 8A8A           00187         BSF     LATB,5
0000A0 D???           00188         BRA     BCHECK  ; Branch to subroutine to check RPGB
0000A2                00189 AOFF
0000A2 9A8A           00190         BCF     LATB,5
0000A4                00191 BCHECK
0000A4 A283           00192         BTFSS   PORTD,1     ; Skip next if D1 (RPGB) is set
0000A6 D???           00193         BRA     BOFF        ; Turn off D3
0000A8 8C8A           00194         BSF     LATB,6      ; Turn on D3
0000AA 0012           00195         return
0000AC                00196 BOFF
0000AC 9C8A           00197         BCF     LATB,6
0000AE 0012           00198         return
                      00199         
                      00200 
Warning[205]: Found directive in column 1. (end)
                      00201 end

Errors   :     0
Warnings :     1 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

