MPASM 5.68                   LAB3_BJELLA.ASM   9-27-2016  17:39:16         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;;;;;;; ASEN 4-5519 Lab3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00002 ; Author: Russell Bjella
                      00003 ; Date  : 15-SEP-2016
                      00004 ;
                      00005 ; DESCRIPTION
                      00006 ; On power up execute the following sequence:
                      00007 ;       D2 ON for ~1 second then OFF
                      00008 ;       D3 ON for ~1 second then OFF
                      00009 ;       D4 ON for ~1 second then OFF
                      00010 ; LOOP on the following forever:
                      00011 ;       Blink "Alive" LED (D6) ON for ~1sec then OFF for ~1sec
                      00012 ;       Read input from RPG (at least once per millesecond) and output the values on D2 and D3
                      00013 ;       ASEN5519 ONLY: Read input from SW3 and toggle the value of D4 such that the switch being pressed
                             and
                      00014 ;                released causes D4 to change state from ON to OFF or OFF to ON
                      00015 ;       NOTE: ~1 second means +/- 100msec
                      00016 ;
                      00017 ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00018 ;
                      00019 ; Mainline
                      00020 ;       Loop
                      00021 ; Initial - Initalize ports and countdown D2, D3 and D4
                      00022 ; WaitXXXms - Subroutine to wait XXXms
                      00023 ; Wait1sec - Subroutine to wait 1 sec based on calling WaitXXXms YYY times
                      00024 ; Check_SW3 - Subroutne to check the status of SW3 and change D4 (ASEN5519 ONLY)
                      00025 ; Check_RPG - Read the values of the RPG and display on D2 and D3
                      00026 ;
                      00027 ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00028 
                      00029         LIST  P=PIC18F87K22, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
                      00030         #include P18F87K22.inc
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : May 15 2016
                      00005 ;  MPASM PIC18F87K22 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      02984         LIST
                      00031 
                      00032 ;               MPLAB 7.20 and later configuration directives
                      00033 ;               Select "Configuration Bits set in code" to use the following configuration
                      00034                 CONFIG  FOSC = HS1, XINST = OFF
                      00035                 CONFIG  PWRTEN = ON, BOREN = ON, BORV = 1
                      00036                 CONFIG  WDTEN = OFF
                      00037                 CONFIG  CCP2MX = PORTBE
                      00038                 
                      00039 
                      00040 
                      00041 ;;;;;;; Hardware notes ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00042 ;
                      00043 ;   LED D2 port/pin is B5
                      00044 ;   LED D3 port/pin is B6               Students add values/remove question marks
                      00045 ;   LED D4 port/pin is B7
                      00046 ;   PIC board LED D6 port/pin is ?
                      00047 ;   PIC board LED D6 - pull pin ? to turn LED on
                      00048 ;       RPG-A port/pin is ?
                      00049 ;       RPG-B port/pin is ?
                      00050 ;       SW1 port/pin is ?
                      00051 
                      00052 ;;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00053 
                      00054         cblock  0x000   ;Beginning of Access RAM, define your variables here
  00000000            00055                         CNT         ;EXAMPLE: variable CNT is at memory address 0x000 in RAM
  00000001            00056                         VAL1        ;EXAMPLE: variable VAL1 is at memory address 0x001 in RAM
                      00057         endc
                      00058 
                      00059 ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00060 
                      00061 ; MOVLF is a macro that puts a literal value into a GPR or SFR
                      00062 MOVLF   macro  literal,dest
                      00063         movlw  literal
                      00064         movwf  dest
                      00065                 endm
                      00066 
                      00067 ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00068 
                      00069         org  0x0000             ;Reset vector
000000 0000           00070         nop
000002 EF?? F???      00071         goto  Mainline
                      00072 
                      00073         org  0x0008             ;High priority interrupt vector
000008 EF?? F???      00074         goto  $                 ;Trap
                      00075 
                      00076         org  0x0018             ;Low priority interrupt vector
000018 EF?? F???      00077         goto  $                 ;Trap
                      00078 
                      00079 ;;;;;;; Mainline program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00080 
00001C                00081 Mainline
00001C D???           00082         rcall  Initial          ;Jump to initalization routine
00001E                00083 Loop
                      00084 ; PUT YOUR CODE HERE
00001E 5083           00085         MOVF    PORTD,0     ; Read switch value into WREG
                      00086         
000020 D???           00087         bra  Loop                               ; Main loop should run forever after entry
                      00088 
                      00089 ;;;;;;; Initial subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00090 ;
                      00091 ; This subroutine performs all initializations of variables and registers.
                      00092 
000022                00093 Initial
                      00094         MOVLF   B'00000000',TRISA       ; Set TRISA
000022 0E00               M         movlw  B'00000000'
000024 6E92               M         movwf  TRISA
                      00095         MOVLF   B'00000000',TRISB       ; Set TRISB
000026 0E00               M         movlw  B'00000000'
000028 6E93               M         movwf  TRISB
                      00096         MOVLF   B'00000000',TRISD       ; Set TRISD
00002A 0E00               M         movlw  B'00000000'
00002C 6E95               M         movwf  TRISD
                      00097         MOVLF   B'00000000',LATB        ; Turn off all LEDS
00002E 0E00               M         movlw  B'00000000'
000030 6E8A               M         movwf  LATB
000032 D???           00098         RCALL   Wait1sec        ; call subroutine to wait 1 second
000034 8A8A           00099         BSF     LATB,5  ; Turn ON D2
000036 D???           00100         RCALL   Wait1sec        ; call subroutine to wait 1 second
000038 9A8A           00101         BCF     LATB,5  ; Turn OFF D2
00003A 8C8A           00102         BSF     LATB,6  ; Turn ON D3
00003C D???           00103         RCALL   Wait1sec        ; call subroutine to wait 1 second
00003E 9C8A           00104         BCF     LATB,6  ; Turn OFF D3
000040 8E8A           00105         BSF     LATB,7  ; Turn ON D4
000042 D???           00106         RCALL   Wait1sec        ; call subroutine to wait 1 second
000044 9E8A           00107         BCF     LATB,7  ; Turn OFF D4
000046 D???           00108         BRA     Loop    ; Go to infinite loop
000048 0012           00109         return
                      00110 
                      00111 ;;;;;;; WaitXXXms subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00112 ;
                      00113 ; Subroutine to wait XXX ms
                      00114 
                      00115         ; NOTE - STUDENTS replace XXX with some value of your choosing
                      00116         ; Choose a suitable value based on a single (non-nested) loop structure and 
                      00117         ; not using an excessive amount of program memory - i.e. don't use 100 nop's
                      00118                 
00004A                00119 Wait2ms
  0000F63C            00120 SMLNUM  EQU     65536-2500
00004A 0E00           00121         MOVLW   B'00000000'
00004C 6ED5           00122         MOVWF   T0CON,0
00004E 0EF6           00123         MOVLW   high SMLNUM
000050 6ED7           00124         MOVWF   TMR0H,0
000052 0E3C           00125         MOVLW   low SMLNUM
000054 6ED6           00126         MOVWF   TMR0L
000056 8ED5           00127         BSF     T0CON,7,0
000058                00128 Loop1   
000058 A4F2           00129         BTFSS   INTCON,TMR0IF,0 ;loop until interrupt flag
00005A D???           00130         BRA     Loop1
00005C 9ED5           00131         BCF     T0CON,7,0   ; turn off timer
00005E 94F2           00132         BCF     INTCON,TMR0IF,0 ;clear the IF
000060 0012           00133         return
                      00134 
                      00135 ;;;;;;; Wait1sec subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00136 ;
                      00137 ; Subroutine to wait 1 sec based on calling WaitXXXms YYY times
                      00138                                 
000062                00139 Wait1sec
  00006769            00140 BIGNUM  EQU     65536-39063
000062 0E05           00141         MOVLW   B'00000101'
000064 6ED5           00142         MOVWF   T0CON,0
000066 0E67           00143         MOVLW   high BIGNUM
000068 6ED7           00144         MOVWF   TMR0H,0
00006A 0E69           00145         MOVLW   low BIGNUM
00006C 6ED6           00146         MOVWF   TMR0L
00006E 8ED5           00147         BSF     T0CON,7,0
000070                00148 Loop2   
000070 A4F2           00149         BTFSS   INTCON,TMR0IF,0 ;loop until interrupt flag
000072 D???           00150         BRA     Loop2
000074 9ED5           00151         BCF     T0CON,7,0   ; turn off timer
000076 94F2           00152         BCF     INTCON,TMR0IF,0 ;clear the IF
                      00153 ;;;;;;; Check_SW3 subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00154 ;
                      00155 ; Subroutne to check the status of SW3 and change D4 (ASEN5519 ONLY)
                      00156                                 
000078                00157 Check_SW3
                      00158                 ; Add code here
000078 0012           00159                 return
                      00160 
                      00161 ;;;;;;; Check_RPG subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00162 ;
                      00163 ; Subroutne to read the values of the RPG and display on D2 and D3 
                      00164                                 
00007A                00165 Check_RPG
                      00166                 ; Add code here
00007A 0012           00167                 return      
                      00168         
                      00169 
                      00170         end

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

