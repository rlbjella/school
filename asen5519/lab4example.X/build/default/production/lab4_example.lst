MPASM 5.68                  LAB4_EXAMPLE.ASM   10-9-2016  20:55:06         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;;;;;;; ASEN 4-5519 Lab 4 Example code ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00002 ;
                      00003 ;   ____ THIS IS NOT A TEMPLATE TO USE FOR LAB 4 _____
                      00004 ;
                      00005 ;   .... THIS CODE PROVIDES EXAMPLE FUNCTIONALITY ....
                      00006 ;
                      00007 ;   .... THE TIMING IN THIS CODE IS DIFFERENT THAN REQUIRED FOR LAB 4 ....
                      00008 ;
                      00009 ;   .... USE YOUR LAB 3 SOURCE FILE AS A STARTING POINT FOR LAB 4 ...
                      00010 ; 
                      00011 ;   .... YOU MAY REUSE PARTS OF THIS CODE IF THEY SUIT YOUR PURPOSE, BUT
                      00012 ;   .... GIVE CREDIT IN YOUR COMMENTS FOR ANY CODE YOU USE FROM HERE
                      00013 ;        FOR EXAMPLE (;   This subroutine is copied (or a modified version) of 
                      00014 ;                     ;   the subroutine XXX in the lab4_example.asm file)
                      00015 ;
                      00016 ; DESCRIPTION
                      00017 ; On power up exceute the following sequence:
                      00018 ;   D2,D4,D4 and D6 should be off
                      00019 ;       D2 ON for ~1 second then OFF
                      00020 ;       D3 ON for ~1 second then OFF
                      00021 ;       D4 ON for ~1 second then OFF
                      00022 ;   'ASEN5519' is output on the first line of the LCD 
                      00023 ; LOOP on the following forever:
                      00024 ;       Blink "Alive" LED (D6) ON for ~250 ms then OFF for ~250 ms
                      00025 ;   Generate PWM signal on RC2, period of T = 20ms, 5% duty cycle. Accurate to
                      00026 ;   +/- 100us
                      00027 ;   Switch checking:
                      00028 ;     ASEN 4519: SW1 press and release switches between 5% to 10% duty cycle
                      00029 ;                (i.e. 2ms on / 18ms off). The second line of the LCD displays
                      00030 ;                the current pulse width (i.e. 'PW=1.0ms') ;
                      00031 ;     ASEN 5519: SW1 press and release increments the ontime (and decrements the
                      00032 ;                offtime) of the PWM signal by 0.2ms each switch press, until
                      00033 ;                2ms on / 18ms off is reached, then reset to 1ms on / 19ms off.
                      00034 ;                The second line of the LCD displays the current pulse width 
                      00035 ;                (i.e. 'PW=1.2ms')
                      00036 ;
                      00037 ; NOTES:
                      00038 ;   ~1 second means +/- 10msec, ~250 ms means +/- 10msec
                      00039 ;   Use Timer0 for ten millisecond looptime.
                      00040 ;
                      00041 ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00042 ;
                      00043 ; Mainline
                      00044 ;   Initial
                      00045 ;      BlinkAlive
                      00046 ;      LoopTime
                      00047 ;
                      00048 ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00049 
                      00050         LIST  P=PIC18F87K22, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
                      00051         #include P18F87K22.inc
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : May 15 2016
                      00005 ;  MPASM PIC18F87K22 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      02984         LIST
                      00052 
                      00053 ;               MPLAB 7.20 and later configuration directives
                      00054 ;               Select "Configuration Bits set in code" to use the following configuration
                      00055                 CONFIG  FOSC = HS1, XINST = OFF
                      00056                 CONFIG  PWRTEN = ON, BOREN = ON, BORV = 1
                      00057                 CONFIG  WDTEN = OFF
                      00058                 CONFIG  CCP2MX = PORTC
                      00059 
                      00060 ;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00061 
                      00062         cblock  0x000                  ;Beginning of Access RAM
  00000000            00063         INTCONCOPY                     ;Copy of INTCON for LoopTime subroutine
  00000001            00064         COUNT                          ;Counter available as local to subroutines
  00000002            00065         ALIVECNT                       ;Counter for blinking "Alive" LED
  00000003            00066         BYTE                           ;Eight-bit byte to be displayed
  00000004            00067         BYTESTR:10                     ;Display string for binary version of BYTE
  0000000E            00068         temp
                      00069         endc
                      00070 
                      00071 ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00072 
                      00073 MOVLF   macro  literal,dest
                      00074         movlw  literal
                      00075         movwf  dest
                      00076         endm
                      00077 
                      00078 POINT   macro  stringname
                      00079         MOVLF  high stringname, TBLPTRH
                      00080         MOVLF  low stringname, TBLPTRL
                      00081         endm
                      00082 
                      00083 DISPLAY macro  register         ;Displays a given register in binary on LCD
                      00084         movff  register,BYTE
                      00085         call  ByteDisplay
                      00086         endm
                      00087         
                      00088 ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00089 
                      00090         org  0x0000                    ;Reset vector
000000 0000           00091         nop 
000002 EF?? F???      00092         goto  Mainline
                      00093 
                      00094         org  0x0008                    ;High priority interrupt vector
000008 EF?? F???      00095         goto  $                        ;Trap
                      00096 
                      00097         org  0x0018                    ;Low priority interrupt vector
000018 EF?? F???      00098         goto  $                        ;Trap
                      00099 
                      00100 ;;;;;;; Mainline program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00101 
00001C                00102 Mainline
00001C D???           00103         rcall   Initial                 ; Initialize everything
00001E                00104 Loop
00001E 748B           00105         btg     LATC,RC2                ; Toggle pin, to support measuring loop time
000020 D???           00106         rcall   BlinkAlive              ; Blink "Alive" LED
000022 0EAF           00107         movlw  B'10101111'              ;
                      00108         DISPLAY WREG
000024 CFE8 F003          M         movff  WREG,BYTE
000028 EC?? F???          M         call  ByteDisplay
00002C D???           00109         rcall   LoopTime                ; Make looptime be ten milliseconds
00002E D???           00110         bra     Loop
                      00111 
                      00112 ;;;;;;; Initial subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00113 ;
                      00114 ; This subroutine performs all initializations of variables and registers.
                      00115 ;
                      00116 ; NOTE: When setting up Ports, always initialize the respective Lat register
                      00117 ;       to a known value!
                      00118 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00119 
000030                00120 Initial
                      00121         MOVLF   B'00001110',TRISB       ; Set I/O for PORTB
000030 0E0E               M         movlw  B'00001110'
000032 6E93               M         movwf  TRISB
                      00122         MOVLF   B'00000000',LATB        ; Initialize PORTB
000034 0E00               M         movlw  B'00000000'
000036 6E8A               M         movwf  LATB
                      00123         MOVLF   B'10010000',TRISC       ; Set I/0 for PORTC
000038 0E90               M         movlw  B'10010000'
00003A 6E94               M         movwf  TRISC
                      00124         MOVLF   B'10000000',LATC        ; Initialize PORTC
00003C 0E80               M         movlw  B'10000000'
00003E 6E8B               M         movwf  LATC
                      00125         MOVLF   B'00001111',TRISJ       ; Set I/O for PORTJ
000040 0E0F               M         movlw  B'00001111'
000042 6E9A               M         movwf  TRISJ
000044 9299           00126         bcf     TRISH,1                 ; Set I/O for RH1
000046 9499           00127         bcf     TRISH,2                 ; Set I/O for RH2
                      00128 
                      00129         MOVLF   B'00000000',INTCON
000048 0E00               M         movlw  B'00000000'
00004A 6EF2               M         movwf  INTCON
                      00130         MOVLF   B'00001000',T0CON       ; Set up Timer0 for a looptime of 10 ms
00004C 0E08               M         movlw  B'00001000'
00004E 6ED5               M         movwf  T0CON
                      00131         MOVLF   high Bignum,TMR0H       ; Writing binary 40536 to TMR0H / TMR0L
000050 0E9E               M         movlw  high Bignum
000052 6ED7               M         movwf  TMR0H
                      00132         MOVLF   low Bignum,TMR0L
000054 0E58               M         movlw  low Bignum
000056 6ED6               M         movwf  TMR0L
                      00133 
                      00134         MOVLF   D'250',ALIVECNT         ; Initializing Alive counter
000058 0EFA               M         movlw  D'250'
00005A 6E02               M         movwf  ALIVECNT
00005C 8ED5           00135         bsf     T0CON,7                 ; Turning on Timer0
                      00136 
00005E D???           00137         rcall   InitLCD                 ; Initialize LCD
000060 D???           00138         rcall   LoopTime
                      00139 
                      00140         POINT   LCDs                    ;Hello
                          M         MOVLF  high LCDs,       TBLPTRH
000062 0E??               M         movlw  high LCDs
000064 6EF7               M         movwf  TBLPTRH
                          M         MOVLF  low LCDs,       TBLPTRL
000066 0E??               M         movlw  low LCDs
000068 6EF6               M         movwf  TBLPTRL
00006A D???           00141         rcall   DisplayC
                      00142         POINT   LCDs2                   ;World!
                          M         MOVLF  high LCDs2,      TBLPTRH
00006C 0E??               M         movlw  high LCDs2
00006E 6EF7               M         movwf  TBLPTRH
                          M         MOVLF  low LCDs2,      TBLPTRL
000070 0E??               M         movlw  low LCDs2
000072 6EF6               M         movwf  TBLPTRL
000074 D???           00143         rcall   DisplayC
                      00144 
000076 0012           00145         return
                      00146 
                      00147 ;;;;;;; InitLCD subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00148 ;
                      00149 ; Initialize the Optrex 8x2 character LCD.
                      00150 ; First wait for 0.1 second, to get past display's power-on reset time.
                      00151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00152         
000078                00153 InitLCD
                      00154         MOVLF  10,COUNT                ;Wait 0.1 second
000078 0E0A               M         movlw  10
00007A 6E01               M         movwf  COUNT
00007C                00155 L2
00007C D???           00156           rcall  LoopTime              ;Call LoopTime 10 times
00007E 0601           00157           decf  COUNT,F
000080 E1??           00158         bnz     L2
                      00159 
000082 9290           00160         bcf     LATH,1                 ;RS=0 for command
                      00161         POINT   LCDstr                 ;Set up table pointer to initialization string
                          M         MOVLF  high LCDstr,     TBLPTRH
000084 0E??               M         movlw  high LCDstr
000086 6EF7               M         movwf  TBLPTRH
                          M         MOVLF  low LCDstr,     TBLPTRL
000088 0E??               M         movlw  low LCDstr
00008A 6EF6               M         movwf  TBLPTRL
00008C 0008           00162         tblrd*                         ;Get first byte from string into TABLAT
00008E                00163 L3
00008E 8490           00164           bsf   LATH,2                 ;Drive E high
000090 CFF5 FF91      00165           movff TABLAT,LATJ            ;Send upper nibble
000094 9490           00166           bcf   LATH,2                 ;Drive E low so LCD will process input
000096 D???           00167           rcall LoopTime               ;Wait ten milliseconds
000098 8490           00168           bsf   LATH,2                 ;Drive E high
00009A 38F5           00169           swapf TABLAT,W               ;Swap nibbles
00009C 6E91           00170           movwf LATJ                   ;Send lower nibble
00009E 9490           00171           bcf   LATH,2                 ;Drive E low so LCD will process input
0000A0 D???           00172           rcall LoopTime               ;Wait ten milliseconds
0000A2 000B           00173           tblrd+*                      ;Increment pointer and get next byte
0000A4 52F5           00174           movf  TABLAT,F               ;Is it zero?
0000A6 E1??           00175         bnz     L3
0000A8 0012           00176         return
                      00177 
                      00178 ;;;;;;; T40 subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00179 ;
                      00180 ; Pause for 40 microseconds  or 40/0.4 = 100 clock cycles.
                      00181 ; Assumes 10/4 = 2.5 MHz internal clock rate.
                      00182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00183         
0000AA                00184 T40
0000AA 0E21           00185         movlw  100/3                 ;Each REPEAT loop takes 3 cycles
0000AC 6E01           00186         movwf  COUNT
0000AE                00187 L4
0000AE 0601           00188           decf  COUNT,F
0000B0 E1??           00189         bnz     L4
0000B2 0012           00190         return
                      00191 
                      00192 ;;;;;;;;DisplayC subroutine;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00193 ;
                      00194 ; This subroutine is called with TBLPTR containing the address of a constant
                      00195 ; display string.  It sends the bytes of the string to the LCD.  The first
                      00196 ; byte sets the cursor position.  The remaining bytes are displayed, beginning
                      00197 ; at that position.
                      00198 ; This subroutine expects a normal one-byte cursor-positioning code, 0xhh, or
                      00199 ; an occasionally used two-byte cursor-positioning code of the form 0x00hh.
                      00200 
0000B4                00201 DisplayC
0000B4 9290           00202           bcf   LATH,1                  ;Drive RS pin low for cursor-positioning code
0000B6 0008           00203           tblrd*                        ;Get byte from string into TABLAT
0000B8 52F5           00204           movf  TABLAT,F                ;Check for leading zero byte
0000BA E1??           00205         bnz     L5
0000BC 000B           00206         tblrd+*                       ;If zero, get next byte
0000BE                00207 L5
0000BE 8490           00208           bsf   LATH,2               ;Drive E pin high
0000C0 CFF5 FF91      00209           movff TABLAT,LATJ         ;Send upper nibble
0000C4 9490           00210           bcf   LATH,2               ;Drive E pin low so LCD will accept nibble
0000C6 8490           00211           bsf   LATH,2               ;Drive E pin high again
0000C8 38F5           00212           swapf TABLAT,W             ;Swap nibbles
0000CA 6E91           00213           movwf LATJ                 ;Write lower nibble
0000CC 9490           00214           bcf   LATH,2               ;Drive E pin low so LCD will process byte
0000CE D???           00215           rcall T40                  ;Wait 40 usec
0000D0 8290           00216           bsf   LATH,1               ;Drive RS pin high for displayable characters
0000D2 000B           00217           tblrd+*                    ;Increment pointer, then get next byte
0000D4 52F5           00218           movf  TABLAT,F             ;Is it zero?
0000D6 E1??           00219         bnz     L5
0000D8 0012           00220         return
                      00221 
                      00222 ;;;;;;; DisplayV subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00223 ;
                      00224 ; This subroutine is called with FSR0 containing the address of a variable
                      00225 ; display string.  It sends the bytes of the string to the LCD.  The first
                      00226 ; byte sets the cursor position.  The remaining bytes are displayed, beginning
                      00227 ; at that position.
                      00228 
0000DA                00229 DisplayV
0000DA 9290           00230         bcf     LATH,1                 ;Drive RS pin low for cursor positioning code
0000DC                00231 L7
0000DC 8490           00232           bsf   LATH,2                 ;Drive E pin high
0000DE CFEF FF91      00233           movff INDF0,LATJ             ;Send upper nibble
0000E2 9490           00234           bcf   LATH,2                 ;Drive E pin low so LCD will accept nibble
0000E4 8490           00235           bsf   LATH,2                 ;Drive E pin high again
0000E6 38EF           00236           swapf INDF0,W                ;Swap nibbles
0000E8 6E91           00237           movwf LATJ                   ;Write lower nibble
0000EA 9490           00238           bcf   LATH,2                 ;Drive E pin low so LCD will process byte
0000EC D???           00239           rcall T40                    ;Wait 40 usec
0000EE 8290           00240           bsf   LATH,1                 ;Drive RS pin high for displayable characters
0000F0 50EC           00241           movf  PREINC0,W              ;Increment pointer, then get next byte
0000F2 E1??           00242         bnz     L7
0000F4 0012           00243         return
                      00244         
                      00245 ;;;;;;; BlinkAlive subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00246 ;
                      00247 ; This subroutine briefly blinks the LED next to the PIC every two-and-a-half
                      00248 ; seconds.
                      00249 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00250 
0000F6                00251 BlinkAlive
0000F6 888A           00252         bsf     LATB,RB4       ; Turn off LED
0000F8 0602           00253         decf    ALIVECNT,F      ; Decrement loop counter and ...
0000FA E1??           00254         bnz     END1            ; return if not zero
                      00255         MOVLF   250,ALIVECNT    ; Reinitialize BLNKCNT
0000FC 0EFA               M         movlw  250
0000FE 6E02               M         movwf  ALIVECNT
000100 988A           00256         bcf     LATB,RB4       ; Turn on LED for ten milliseconds every 2.5 sec
000102                00257 END1
000102 0012           00258         return
                      00259 
                      00260 ;;;;;;; LoopTime subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00261 ;
                      00262 ; This subroutine waits for Timer0 to complete its ten millisecond count
                      00263 ; sequence. It does so by waiting for sixteen-bit Timer0 to roll over. To obtain
                      00264 ; a period of 10000/0.4 = 25000 clock periods, it needs to remove
                      00265 ; 65536-25000 or 40536 counts from the sixteen-bit count sequence.  
                      00266 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00267 
  00009E58            00268 Bignum  equ     65536-25000
                      00269 
000104                00270 LoopTime
000104 A4F2           00271         btfss   INTCON,TMR0IF           ; Read Timer0 rollover flag and ...
000106 D???           00272         bra     LoopTime                ; Loop if timer has not rolled over
                      00273         MOVLF   high Bignum,TMR0H       ; Then write the timer values into
000108 0E9E               M         movlw  high Bignum
00010A 6ED7               M         movwf  TMR0H
                      00274         MOVLF   low Bignum,TMR0L        ; the timer high and low registers
00010C 0E58               M         movlw  low Bignum
00010E 6ED6               M         movwf  TMR0L
000110 94F2           00275         bcf     INTCON,TMR0IF           ; Clear Timer0 rollover flag
000112 0012           00276         return
                      00277 
                      00278 ;;;;;;; ByteDisplay subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00279 ;
                      00280 ; Display whatever is in BYTE as a binary number.
                      00281 
000114                00282 ByteDisplay
                      00283         POINT   BYTE_1                 ;Display "BYTE="
                          M         MOVLF  high BYTE_1,     TBLPTRH
000114 0E??               M         movlw  high BYTE_1
000116 6EF7               M         movwf  TBLPTRH
                          M         MOVLF  low BYTE_1,     TBLPTRL
000118 0E??               M         movlw  low BYTE_1
00011A 6EF6               M         movwf  TBLPTRL
00011C D???           00284         rcall   DisplayC
00011E EE00 F00C      00285         lfsr    0,BYTESTR+8
000122                00286 L10
000122 6AE8           00287           clrf  WREG
000124 3203           00288           rrcf  BYTE,F                 ;Move bit into carry
000126 36E8           00289           rlcf  WREG,F                 ;and from there into WREG
000128 0930           00290           iorlw 0x30                   ;Convert to ASCII
00012A 6EED           00291           movwf POSTDEC0               ; and move to string
00012C 50E9           00292           movf  FSR0L,W                ;Done?
00012E 0804           00293           sublw low BYTESTR
000130 E1??           00294         bnz     L10
                      00295 
000132 EE00 F004      00296         lfsr    0,BYTESTR              ;Set pointer to display string
                      00297         MOVLF   0xc0,BYTESTR           ;Add cursor-positioning code
000136 0EC0               M         movlw  0xc0
000138 6E04               M         movwf  BYTESTR
00013A 6A0D           00298         clrf    BYTESTR+9              ;and end-of-string terminator
00013C D???           00299         rcall   DisplayV
00013E 0012           00300         return
                      00301 
                      00302 ;;;;;;; Constant strings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00303 
000140 3233 0128 060C 00304 LCDstr  db  0x33,0x32,0x28,0x01,0x0c,0x06,0x00  ;Initialization string for LCD
       0000 
000148 4280 5459 3D45 00305 BYTE_1  db  "\x80BYTE=   \x00"         ;Write "BYTE=" to first line of LCD
       2020 0020 
000152 2080 2020 2020 00306 LCDcl   db  "\x80        \x00"
       2020 0020 
00015C 4880 6C65 6F6C 00307 LCDs    db  "\x80Hello\x00"
       0000 
000164 57C0 726F 646C 00308 LCDs2   db  "\xC0World!\x00"
       0021 
                      00309 ;;;;;;; End of Program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00310 
                      00311         end

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

