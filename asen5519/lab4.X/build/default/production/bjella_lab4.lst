MPASM 5.68                   BJELLA_LAB4.ASM   10-10-2016  18:09:40         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;;;;;;; ASEN 4-5519 Lab3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00002 ; Author: Russell Bjella
                      00003 ; Date  : 11-OCT-2016
                      00004 ;
                      00005 ; DESCRIPTION
                      00006 ; On power up execute the following sequence:
                      00007 ;       D2 ON for ~1 second then OFF
                      00008 ;       D3 ON for ~1 second then OFF
                      00009 ;       D4 ON for ~1 second then OFF
                      00010 ; LOOP on the following forever:
                      00011 ;       Blink "Alive" LED (D6) ON for ~250ms then OFF for ~250ms
                      00012 ;       A periodic pulse is output on RC2 with a period of 20ms and a 5% duty cycle.
                      00013 ;       The second line of the LCD reads 'PW=1.0ms'     
                      00014 ;       When S1 is pressed and released, the pulse width is increased by 0.2 ms.
                      00015 ;       If the pulse width is 2.0ms, pressing and releasing SW1 resets it to 1.0ms.
                      00016 ;
                      00017 ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00018 ;
                      00019 ; Mainline
                      00020 ;       Loop
                      00021 ; Initial - Initalize ports and countdown D2, D3 and D4
                      00022 ; Wait2ms - Subroutine to wait XXXms
                      00023 ; Wait1sec - Subroutine to wait 1 sec
                      00024 ; Check_SW3 - Subroutne to check the status of SW3 and change D4 (ASEN5519 ONLY)
                      00025 ; Check_RPG - Read the values of the RPG and display on D2 and D3
                      00026 ;
                      00027 ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00028 
                      00029         LIST  P=PIC18F87K22, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
                      00030         #include P18F87K22.inc
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : May 15 2016
                      00005 ;  MPASM PIC18F87K22 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      02984         LIST
                      00031 
                      00032 ;               MPLAB 7.20 and later configuration directives
                      00033 ;               Select "Configuration Bits set in code" to use the following configuration
                      00034                 CONFIG  FOSC = HS1, XINST = OFF
                      00035                 CONFIG  PWRTEN = ON, BOREN = ON, BORV = 1
                      00036                 CONFIG  WDTEN = OFF
                      00037                 CONFIG  CCP2MX = PORTBE
                      00038                 
                      00039 
                      00040 
                      00041 ;;;;;;; Hardware notes ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00042 ;
                      00043 ;   LED D2 port/pin is B5
                      00044 ;   LED D3 port/pin is B6               Students add values/remove question marks
                      00045 ;   LED D4 port/pin is B7
                      00046 ;   PIC board LED D6 port/pin is B4
                      00047 ;   PIC board LED D6 - pull pin ? to turn LED on
                      00048 ;       RPG-A port/pin is D0
                      00049 ;       RPG-B port/pin is D1
                      00050 ;       SW1 port/pin is D3
                      00051 
                      00052 ;;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00053 
                      00054         cblock  0x000   ;Beginning of Access RAM, define your variables here
  00000000            00055                         CNT         ;counter for 2ms wait loop in infinite loop
  00000001            00056                         COUNT       ;generic counter for subroutines
  00000002            00057                         VAL1        ;bit0 is set to 1 if the switch is currently pressed
                      00058         endc
                      00059 
                      00060 ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00061 
                      00062 ; MOVLF is a macro that puts a literal value into a GPR or SFR
                      00063 MOVLF   macro  literal,dest
                      00064         movlw  literal
                      00065         movwf  dest
                      00066         endm
                      00067         
                      00068 POINT   macro  stringname
                      00069         MOVLF  high stringname, TBLPTRH
                      00070         MOVLF  low stringname, TBLPTRL
                      00071         endm
                      00072 
                      00073 ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00074 
                      00075         org  0x0000             ;Reset vector
000000 0000           00076         nop
000002 EF?? F???      00077         goto  Mainline
                      00078 
                      00079         org  0x0008             ;High priority interrupt vector
000008 EF?? F???      00080         goto  $                 ;Trap
                      00081 
                      00082         org  0x0018             ;Low priority interrupt vector
000018 EF?? F???      00083         goto  $                 ;Trap
                      00084 
                      00085 ;;;;;;; Mainline program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00086 
00001C                00087 Mainline
00001C D???           00088         rcall  Initial          ;Jump to initalization routine
00001E                00089 Loop
00001E 788A           00090         BTG     LATB,4  ; Toggle D6 on/off
                      00091         MOVLF   0xFA,CNT    ; Store 250 in CNT for 250ms
000020 0EFA               M         movlw  0xFA
000022 6E00               M         movwf  CNT
                      00092 ; Go through second loop 250 times, waiting 1ms each time
000024                00093 Loop1
000024 D???           00094             RCALL   Check_SW1
000026 D???           00095             RCALL   Wait0d2ms   ;0.2ms
000028 D???           00096             RCALL   Check_SW1
00002A D???           00097             RCALL   Wait0d2ms   ;0.4ms
00002C D???           00098             RCALL   Check_SW1
00002E D???           00099             RCALL   Wait0d2ms   ;0.6ms
000030 D???           00100             RCALL   Check_SW1
000032 D???           00101             RCALL   Wait0d2ms   ;0.8ms
000034 D???           00102             RCALL   Check_SW1
000036 D???           00103             RCALL   Wait0d2ms   ;1.0ms
000038 0600           00104             DECF    CNT,1,0     ; Decrement counter, started at 250
00003A E1??           00105             BNZ     Loop1
                      00106         ; Loop infinitely through main loop
00003C D???           00107         bra     Loop                            ; Main loop should run forever after entry
                      00108 
                      00109 ;;;;;;; Initial subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00110 ; This subroutine performs all initializations of variables and registers.
                      00111 
00003E                00112 Initial
                      00113         MOVLF   B'00000000',TRISB       ; Set TRISB as outputs
00003E 0E00               M         movlw  B'00000000'
000040 6E93               M         movwf  TRISB
                      00114         MOVLF   B'00000000',LATB        ; Turn off all LEDS
000042 0E00               M         movlw  B'00000000'
000044 6E8A               M         movwf  LATB
                      00115         MOVLF   B'00001111',TRISJ       ; Set I/O for PORTJ
000046 0E0F               M         movlw  B'00001111'
000048 6E9A               M         movwf  TRISJ
00004A 9299           00116         bcf     TRISH,1                 ; Set I/O for RH1
00004C 9499           00117         bcf     TRISH,2                 ; Set I/O for RH2
00004E D???           00118         RCALL   Wait1sec
000050 8A8A           00119         BSF     LATB,5  ; Turn ON D2
000052 D???           00120         RCALL   Wait1sec
000054 9A8A           00121         BCF     LATB,5  ; Turn OFF D2
000056 8C8A           00122         BSF     LATB,6  ; Turn ON D3
000058 D???           00123         RCALL   Wait1sec
00005A 9C8A           00124         BCF     LATB,6  ; Turn OFF D3
00005C 8E8A           00125         BSF     LATB,7  ; Turn ON D4
00005E D???           00126         RCALL   Wait1sec
000060 9E8A           00127         BCF     LATB,7  ; Turn OFF D4
000062 D???           00128         rcall   InitLCD ; Initialize LCD
                      00129         ; Display name
                      00130         POINT NAME
                          M         MOVLF  high NAME,       TBLPTRH
000064 0E??               M         movlw  high NAME
000066 6EF7               M         movwf  TBLPTRH
                          M         MOVLF  low NAME,       TBLPTRL
000068 0E??               M         movlw  low NAME
00006A 6EF6               M         movwf  TBLPTRL
00006C D???           00131         rcall   DisplayC
                      00132         ; Display PW= and ms
                      00133         POINT   PWEQ
                          M         MOVLF  high PWEQ,       TBLPTRH
00006E 0E??               M         movlw  high PWEQ
000070 6EF7               M         movwf  TBLPTRH
                          M         MOVLF  low PWEQ,       TBLPTRL
000072 0E??               M         movlw  low PWEQ
000074 6EF6               M         movwf  TBLPTRL
000076 D???           00134         rcall   DisplayC
                      00135         POINT   MSUNIT
                          M         MOVLF  high MSUNIT,     TBLPTRH
000078 0E??               M         movlw  high MSUNIT
00007A 6EF7               M         movwf  TBLPTRH
                          M         MOVLF  low MSUNIT,     TBLPTRL
00007C 0E??               M         movlw  low MSUNIT
00007E 6EF6               M         movwf  TBLPTRL
000080 D???           00136         rcall   DisplayC
000082 D???           00137         BRA     Loop    ; Go to infinite loop
000084 0012           00138         return
                      00139         
                      00140 ;;;;;;; InitLCD subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00141 ; Initialize the Optrex 8x2 character LCD.
                      00142 ; First wait for 0.1 second, to get past display's power-on reset time.
                      00143         
000086                00144 InitLCD
                      00145         MOVLF   100,COUNT                ;Wait 0.1 second
000086 0E64               M         movlw  100
000088 6E01               M         movwf  COUNT
00008A                00146 L5
00008A D???           00147         rcall   Wait1ms              ;Call Wait1ms 100 times (100ms)
00008C 0601           00148         decf    COUNT,F
00008E E1??           00149         bnz     L5
                      00150 
000090 9290           00151         bcf     LATH,1                 ;RS=0 for command
                      00152         POINT   LCDstr                 ;Set up table pointer to initialization string
                          M         MOVLF  high LCDstr,     TBLPTRH
000092 0E??               M         movlw  high LCDstr
000094 6EF7               M         movwf  TBLPTRH
                          M         MOVLF  low LCDstr,     TBLPTRL
000096 0E??               M         movlw  low LCDstr
000098 6EF6               M         movwf  TBLPTRL
00009A 0008           00153         tblrd*                         ;Get first byte from string into TABLAT
00009C                00154 L6
00009C 8490           00155         bsf     LATH,2                 ;Drive E high
00009E CFF5 FF91      00156         movff   TABLAT,LATJ            ;Send upper nibble
0000A2 9490           00157         bcf     LATH,2                 ;Drive E low so LCD will process input
0000A4 D???           00158         rcall   Wait1ms               ;Wait ten milliseconds
0000A6 8490           00159         bsf     LATH,2                 ;Drive E high
0000A8 38F5           00160         swapf   TABLAT,W               ;Swap nibbles
0000AA 6E91           00161         movwf   LATJ                   ;Send lower nibble
0000AC 9490           00162         bcf     LATH,2                 ;Drive E low so LCD will process input
0000AE D???           00163         rcall   Wait1ms               ;Wait ten milliseconds
0000B0 000B           00164         tblrd+*                      ;Increment pointer and get next byte
0000B2 52F5           00165         movf    TABLAT,F               ;Is it zero?
0000B4 E1??           00166         bnz     L6
0000B6 0012           00167         return
                      00168         
                      00169 ;;;;;;; Wait1sec subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00170 ; Subroutine to wait 1 sec
                      00171                                 
0000B8                00172 Wait1sec
  00006769            00173 BIGNUM  EQU     65536-39063
0000B8 0E05           00174         MOVLW   B'00000101'
0000BA 6ED5           00175         MOVWF   T0CON,0
0000BC 0E67           00176         MOVLW   high BIGNUM
0000BE 6ED7           00177         MOVWF   TMR0H,0
0000C0 0E69           00178         MOVLW   low BIGNUM
0000C2 6ED6           00179         MOVWF   TMR0L
0000C4 8ED5           00180         BSF     T0CON,7,0
0000C6                00181 Loop2   
0000C6 A4F2           00182         BTFSS   INTCON,TMR0IF,0 ;loop until interrupt flag
0000C8 D???           00183         BRA     Loop2
0000CA 9ED5           00184         BCF     T0CON,7,0   ; turn off timer
0000CC 94F2           00185         BCF     INTCON,TMR0IF,0 ;clear the IF
                      00186 
                      00187 ;;;;;;; Wait0d2ms subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00188 ; Subroutine to wait 0.2 ms             
0000CE                00189 Wait0d2ms
  0000FF06            00190 SMLNUM  EQU     65536-250
0000CE 0E00           00191         MOVLW   B'00000000' ;set prescaler
0000D0 6ED5           00192         MOVWF   T0CON,0
0000D2 0EFF           00193         MOVLW   high SMLNUM
0000D4 6ED7           00194         MOVWF   TMR0H,0
0000D6 0E06           00195         MOVLW   low SMLNUM
0000D8 6ED6           00196         MOVWF   TMR0L
0000DA 8ED5           00197         BSF     T0CON,7,0
0000DC                00198 Loop0d2ms       
0000DC A4F2           00199         BTFSS   INTCON,TMR0IF,0 ;loop until interrupt flag
0000DE D???           00200         BRA     Loop0d2ms
0000E0 9ED5           00201         BCF     T0CON,7,0   ; turn off timer
0000E2 94F2           00202         BCF     INTCON,TMR0IF,0 ;clear the IF
0000E4 0012           00203         return
                      00204         
                      00205 ;;;;;;; Wait10ms subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00206 ; Subroutine to wait 10 ms              
0000E6                00207 Wait1ms
  0000FB1E            00208 MIDNUM  EQU     65536-1250
0000E6 0E00           00209         MOVLW   B'00000000' ;set prescaler
0000E8 6ED5           00210         MOVWF   T0CON,0
0000EA 0EFB           00211         MOVLW   high MIDNUM
0000EC 6ED7           00212         MOVWF   TMR0H,0
0000EE 0E1E           00213         MOVLW   low MIDNUM
0000F0 6ED6           00214         MOVWF   TMR0L
0000F2 8ED5           00215         BSF     T0CON,7,0
0000F4                00216 Loop1ms 
0000F4 A4F2           00217         BTFSS   INTCON,TMR0IF,0 ;loop until interrupt flag
0000F6 D???           00218         BRA     Loop1ms
0000F8 9ED5           00219         BCF     T0CON,7,0   ; turn off timer
0000FA 94F2           00220         BCF     INTCON,TMR0IF,0 ;clear the IF
0000FC 0012           00221         return
                      00222 
                      00223         
                      00224 ;;;;;;; Check_SW1 subroutine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00225 ; Subroutine to check the status of SW1 and change pulse width                          
0000FE                00226 Check_SW1
                      00227         ; Check if switch is pressed, skip branch if it is 
0000FE A683           00228         BTFSS   PORTD,3
000100 D???           00229         BRA     CLRVAL1
000102 B002           00230         BTFSC   VAL1,0  ;if VAL1 bit0 is clear, set true, toggle D4 (released)
000104 0012           00231         return  ; return if VAL1 bit0 is set (wait for release)
000106 8002           00232         BSF     VAL1,0  ;set VAL1 bit0
000108 7E8A           00233         BTG     LATB,7  ;replace this with pulse width change
00010A 0012           00234         return  
00010C                00235 CLRVAL1 ; subroutine to clear bit 0 of VAL1 then return
00010C 9002           00236         BCF     VAL1,0
00010E 0012           00237         return
                      00238         
                      00239 ;;;;;;;;DisplayC subroutine;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00240 ; This subroutine is called with TBLPTR containing the address of a constant
                      00241 ; display string.  It sends the bytes of the string to the LCD.  The first
                      00242 ; byte sets the cursor position.  The remaining bytes are displayed, beginning
                      00243 ; at that position.
                      00244 ; This subroutine expects a normal one-byte cursor-positioning code, 0xhh, or
                      00245 ; an occasionally used two-byte cursor-positioning code of the form 0x00hh.
                      00246 
000110                00247 DisplayC
000110 9290           00248         bcf     LATH,1                  ;Drive RS pin low for cursor-positioning code
000112 0008           00249         tblrd*                        ;Get byte from string into TABLAT
000114 52F5           00250         movf    TABLAT,F                ;Check for leading zero byte
000116 E1??           00251         bnz     L7
000118 000B           00252         tblrd+*                       ;If zero, get next byte
00011A                00253 L7
00011A 8490           00254         bsf     LATH,2               ;Drive E pin high
00011C CFF5 FF91      00255         movff   TABLAT,LATJ         ;Send upper nibble
000120 9490           00256         bcf     LATH,2               ;Drive E pin low so LCD will accept nibble
000122 8490           00257         bsf     LATH,2               ;Drive E pin high again
000124 38F5           00258         swapf   TABLAT,W             ;Swap nibbles
000126 6E91           00259         movwf   LATJ                 ;Write lower nibble
000128 9490           00260         bcf     LATH,2               ;Drive E pin low so LCD will process byte
00012A D???           00261         rcall   Wait0d2ms                 ;Wait 10ms
00012C 8290           00262         bsf     LATH,1               ;Drive RS pin high for displayable characters
00012E 000B           00263         tblrd+*                    ;Increment pointer, then get next byte
000130 52F5           00264         movf    TABLAT,F             ;Is it zero?
000132 E1??           00265         bnz     L7
000134 0012           00266         return
                      00267         
                      00268 ;;;;;;; Constant strings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000136 3233 0128 060C 00269 LCDstr  db  0x33,0x32,0x28,0x01,0x0c,0x06,0x00  ;Initialization string for LCD
       0000 
00013E 4282 454A 4C4C 00270 NAME    db  "\x82BJELLA\x00"
       0041 
000146 50C0 3D57 0000 00271 PWEQ    db  "\xC0PW=\x00"
00014C 6DC6 0073      00272 MSUNIT  db  "\xC6ms\x00"
                      00273   
Warning[205]: Found directive in column 1. (end)
                      00274 end

Errors   :     0
Warnings :     1 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

